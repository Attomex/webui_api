import React, { useState } from "react";
import { Stack, Badge } from "react-bootstrap";
import VulnerabilityCard from "../VulnerabilityCard/VulnerabilityCard";

const VulnerabilityInfo = ({
    vulnerabilities,
    selectedComputer,
    selectedDate,
    selectedReportNumber,
    openModal,
}) => {
    const [selectedErrorLevels, setSelectedErrorLevels] = useState(["Критический", "Высокий", "Средний", "Низкий"]);
    const handleErrorLevelChange = (level) => {
        if (selectedErrorLevels.includes(level)) {
            setSelectedErrorLevels(selectedErrorLevels.filter(l => l !== level));
        } else {
            setSelectedErrorLevels([...selectedErrorLevels, level]);
        }
    };

    const filteredVulnerabilities = vulnerabilities.filter(vulnerability =>
        selectedErrorLevels.includes(vulnerability.error_level)
    );
    return (
        <div>
            <p>Идентификатор компьютера: {selectedComputer}</p>
            <p>Дата отчёта: {selectedDate}</p>
            <p>Номер отчёта: {selectedReportNumber}</p>

            <Stack direction="horizontal" gap={3} style={{ marginBottom: '15px' }}>
                {["Критический", "Высокий", "Средний", "Низкий"].map(level => (
                    <div key={level}>
                        <Badge pill bg='dark' text="light" onClick={() => handleErrorLevelChange(level)} style={{ cursor: 'pointer', height: '30px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                        <input
                            type="checkbox"
                            checked={selectedErrorLevels.includes(level)}
                            onChange={() => handleErrorLevelChange(level)}
                            style={{
                                appearance: 'none',
                                cursor: 'pointer',
                                width: '15px',
                                height: '15px',
                                borderRadius: '50%',
                                border: '1px groove #007bff',
                                marginRight: '5px',
                                position: 'relative',
                                outline: 'none',
                                boxShadow: 'none',
                                backgroundColor: selectedErrorLevels.includes(level) ? '#007bff' : 'transparent',
                            }}
                        />
                        {level}</Badge>
                    </div>
                ))}
            </Stack>

            <div
                style={{
                    display: "flex",
                    flexWrap: "wrap",
                    gap: "11px",
                    overflowX: "hidden",
                }}
            >
                {filteredVulnerabilities.map((vulnerability) => (
                    <VulnerabilityCard
                        key={vulnerability.id}
                        vulnerability={vulnerability}
                        openModal={openModal}
                    />
                ))}
            </div>
        </div>
    );
};

export default VulnerabilityInfo;
